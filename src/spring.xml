<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        ">

	<!-- 采用注解的方式配置bean -->
	<context:annotation-config />
	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="com.caas" />
	<!-- 根据不同的运行环境加载配置文件 -->
	<context:property-placeholder location="classpath:config/config.properties" />

	<!-- 配置DBCP数据库连接池 -->
	<bean id="caas_dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="url" value="${caas.jdbc.url}" />
		<property name="username" value="${caas.jdbc.username}" />
		<property name="password" value="${caas.jdbc.password}" />
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="initialSize" value="3" />		<!-- 初始化连接 -->
		<property name="maxTotal" value="20" />			<!-- 最大活动连接 -->
		<property name="maxIdle" value="5" />			<!-- 最大空闲连接 -->
		<property name="minIdle" value="1" />			<!-- 最小空闲连接 -->
		<property name="maxWaitMillis" value="3000" />	<!-- 从池中取连接的最大等待时间，单位毫秒 -->

		<property name="validationQuery" value="SELECT 1" />			<!-- 验证使用的SQL语句 -->
		<property name="testWhileIdle" value="true" />					<!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除 -->
		<property name="testOnBorrow" value="false" />					<!-- 借出连接时不要测试，否则很影响性能 -->
		<property name="timeBetweenEvictionRunsMillis" value="30000" />	<!-- 每30秒运行一次空闲连接回收器 -->
		<property name="minEvictableIdleTimeMillis" value="1800000" />	<!-- 池中的连接空闲30分钟后被回收 -->
		<property name="numTestsPerEvictionRun" value="3" />			<!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
		<property name="removeAbandonedOnBorrow" value="true" />		<!-- 连接泄漏回收参数，当可用连接数少于3个时才执行 -->
		<property name="removeAbandonedTimeout" value="180" />			<!-- 连接泄漏回收参数，180秒，泄露的连接可以被删除的超时值 -->
	</bean>
	<!-- 配置mybitasSqlSessionFactoryBean -->
	<bean id="caas_sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="caas_dataSource" />
		<property name="configLocation" value="classpath:mybatis.xml" />
		<property name="mapperLocations" value="classpath:mapper/**/*Mapper.xml" />
	</bean>
	<!-- 配置SqlSessionTemplate -->
	<bean id="caas_sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="caas_sqlSessionFactory" />
	</bean>
	<!-- 事务配置 -->
	<bean id="caas_transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="caas_dataSource" />
	</bean>
	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="caas_transactionManager" />
	
	<!-- 业务redis连接配置 -->
<!-- 	<bean id="baseRedis" class="com.vboss.util.BaseRedis" -->
<!-- 		init-method="init"> -->
<!-- 		<property name="redis_servers" value="${redis_servers}" /> -->
<!-- 		<property name="redis_port" value="${redis_port}" /> -->
<!-- 		<property name="redis_maxActive" value="300" /> -->
<!-- 		<property name="redis_maxIdle" value="10" /> -->
<!-- 		<property name="redis_maxWait" value="100000" /> -->
<!-- 		<property name="redis_testOnBorrow" value="true" /> -->
<!-- 		<property name="redis_password" value="${redis_password}"></property> -->
<!-- 		<property name="redis_timeout" value="${redis_timeout}"></property> -->
<!-- 	</bean> -->

<!-- 	<bean id="beanFactory" class="com.vboss.factory.BeanFactory"> -->
<!-- 		<property name="baseRedis" ref="baseRedis"></property> -->
<!-- 		<property name="vbossDao" ref="vbossDao"></property> -->
<!-- 		<property name="dataDict" ref="dataDict"></property> -->
<!-- 	</bean> -->

</beans>